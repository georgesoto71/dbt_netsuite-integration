{"results": [{"node": {"raw_sql": "with transactions as (\n    select * from {{ source('netsuite', 'transactions') }}\n), \ntransaction_lines as (\n    select * from {{ source('netsuite', 'transaction_lines') }}\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n  where not transactions._fivetran_deleted\n    and lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * from transaction_lines_w_accounting_period", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "transaction_lines_w_accounting_period"], "unique_id": "model.netsuite.transaction_lines_w_accounting_period", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "transaction_lines_w_accounting_period.sql", "original_file_path": "models/transaction_lines_w_accounting_period.sql", "name": "transaction_lines_w_accounting_period", "resource_type": "model", "alias": "transaction_lines_w_accounting_period", "checksum": {"name": "sha256", "checksum": "ea45f5f9c950435bd92fd1eaf77c53cb764b14c44672598fe097f7f383ce2ae4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["netsuite", "transactions"], ["netsuite", "transaction_lines"]], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.transactions", "source.netsuite.netsuite.transaction_lines"]}, "description": "(Step 2/4) Next, we need to prepare a cleaned version of all transactions we need.   Using the transactions and transaction_lines tables, the necessary fields are extracted,  and transactions that are deleted, revenue arrangements, or non-posting transactions are  filtered out. This is called transaction_lines_w_accounting_period. \n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/transaction_lines_w_accounting_period.sql", "deferred": false, "compiled_sql": "with transactions as (\n    select * from `private-internal`.`netsuite`.`transactions`\n), \ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n  where not transactions._fivetran_deleted\n    and lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * from transaction_lines_w_accounting_period", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with transactions as (\n    select * from `private-internal`.`netsuite`.`transactions`\n), \ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\n\ntransaction_lines_w_accounting_period as ( -- transaction line totals, by accounts, accounting period and subsidiary\n  select\n    transaction_lines.transaction_id,\n    transaction_lines.transaction_line_id,\n    transaction_lines.subsidiary_id,\n    transaction_lines.account_id,\n    transactions.accounting_period_id as transaction_accounting_period_id,\n    coalesce(transaction_lines.amount, 0) as unconverted_amount\n  from transaction_lines\n  join transactions on transactions.transaction_id = transaction_lines.transaction_id\n  where not transactions._fivetran_deleted\n    and lower(transactions.transaction_type) != 'revenue arrangement'\n    and lower(non_posting_line) != 'yes'\n)\n\nselect * from transaction_lines_w_accounting_period"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9385430812835693, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:54.022954Z", "completed_at": "2020-10-22T21:29:54.088149Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:54.088358Z", "completed_at": "2020-10-22T21:29:54.945686Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with accounts as (\n    select * from {{ source('netsuite', 'accounts') }}\n), \naccounting_books as (\n    select * from {{ source('netsuite', 'accounting_books') }}\n), \nsubsidiaries as (\n    select * from {{ source('netsuite', 'subsidiaries') }}\n),\nconsolidated_exchange_rates as (\n    select * from {{ source('netsuite', 'consolidated_exchange_rates') }}\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n    and not consolidated_exchange_rates._fivetran_deleted\n), accountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n      end as exchange_rate\n  from accounts\n  cross join period_exchange_rate_map\n)\nselect * from accountxperiod_exchange_rate_map", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "accountxperiod_exchange_rate_map"], "unique_id": "model.netsuite.accountxperiod_exchange_rate_map", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "accountxperiod_exchange_rate_map.sql", "original_file_path": "models/accountxperiod_exchange_rate_map.sql", "name": "accountxperiod_exchange_rate_map", "resource_type": "model", "alias": "accountxperiod_exchange_rate_map", "checksum": {"name": "sha256", "checksum": "6089516e152f3e595f2442015b5985799d4fe5697a0a141aa192d371e69ddb24"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["netsuite", "accounts"], ["netsuite", "accounting_books"], ["netsuite", "subsidiaries"], ["netsuite", "consolidated_exchange_rates"]], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounts", "source.netsuite.netsuite.accounting_books", "source.netsuite.netsuite.subsidiaries", "source.netsuite.netsuite.consolidated_exchange_rates"]}, "description": "(Step 1/4) In order to accurately recreate the balance sheet and income statement,  it is necessary to convert all transaction amounts into the currency of  the parent subsidiary. The logic gets complicated fast, mostly because  of the behavior of the balance sheet.  On the balance sheet, the conversion  rate you use for a single transaction will differ by accounting period.   For example, if a transaction took place in August, and you are generating  balances for the December period, you will need to convert the August transaction  using the December conversion rate.\nThe first step here is to create a mapping of all accounting periods and the  respective exchange rates, by subsidiary. This is called period_exchange_rate_map\nNext, we cross join the accounts table to the period_exchange_rate_map, so we can  generate a map of exchange rates, by account, accounting period, and subsidiary.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/accountxperiod_exchange_rate_map.sql", "deferred": false, "compiled_sql": "with accounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_books as (\n    select * from `private-internal`.`netsuite`.`accounting_books`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\nconsolidated_exchange_rates as (\n    select * from `private-internal`.`netsuite`.`consolidated_exchange_rates`\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n    and not consolidated_exchange_rates._fivetran_deleted\n), accountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n      end as exchange_rate\n  from accounts\n  cross join period_exchange_rate_map\n)\nselect * from accountxperiod_exchange_rate_map", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with accounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_books as (\n    select * from `private-internal`.`netsuite`.`accounting_books`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\nconsolidated_exchange_rates as (\n    select * from `private-internal`.`netsuite`.`consolidated_exchange_rates`\n),\n\nperiod_exchange_rate_map as ( -- exchange rates used, by accounting period, to convert to parent subsidiary\n  select\n    consolidated_exchange_rates.accounting_period_id,\n    consolidated_exchange_rates.average_rate,\n    consolidated_exchange_rates.current_rate,\n    consolidated_exchange_rates.historical_rate,\n    consolidated_exchange_rates.from_subsidiary_id,\n    consolidated_exchange_rates.to_subsidiary_id\n  from consolidated_exchange_rates\n  where consolidated_exchange_rates.to_subsidiary_id in (select subsidiary_id from subsidiaries where parent_id is null)  -- constrait - only the primary subsidiary has no parent\n    and consolidated_exchange_rates.accounting_book_id in (select accounting_book_id from accounting_books where lower(is_primary) = 'yes')\n    and not consolidated_exchange_rates._fivetran_deleted\n), accountxperiod_exchange_rate_map as ( -- account table with exchange rate details by accounting period\n  select\n    period_exchange_rate_map.accounting_period_id,\n    period_exchange_rate_map.from_subsidiary_id,\n    period_exchange_rate_map.to_subsidiary_id,\n    accounts.account_id,\n    case \n      when lower(accounts.general_rate_type) = 'historical' then period_exchange_rate_map.historical_rate\n      when lower(accounts.general_rate_type) = 'current' then period_exchange_rate_map.current_rate\n      when lower(accounts.general_rate_type) = 'average' then period_exchange_rate_map.average_rate\n      else null\n      end as exchange_rate\n  from accounts\n  cross join period_exchange_rate_map\n)\nselect * from accountxperiod_exchange_rate_map"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9586329460144043, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:53.995819Z", "completed_at": "2020-10-22T21:29:54.042879Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:54.043258Z", "completed_at": "2020-10-22T21:29:54.952381Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with accounting_periods as (\n    select * from {{ source('netsuite', 'accounting_periods') }}\n),\nsubsidiaries as (\n    select * from {{ source('netsuite', 'subsidiaries') }}\n),\ntransaction_and_reporting_periods as ( \n\n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n  join accounting_periods as multiplier\n    on multiplier.starting >= base.starting\n    and multiplier.quarter = base.quarter\n    and multiplier.year_0 = base.year_0\n    and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n    and multiplier.starting <= {{ current_timestamp() }}\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\nselect * from transaction_and_reporting_periods", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "transaction_and_reporting_periods"], "unique_id": "model.netsuite.transaction_and_reporting_periods", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "transaction_and_reporting_periods.sql", "original_file_path": "models/transaction_and_reporting_periods.sql", "name": "transaction_and_reporting_periods", "resource_type": "model", "alias": "transaction_and_reporting_periods", "checksum": {"name": "sha256", "checksum": "cb9e4d5cafb9e8c52d522abba718c058c9b0ec669a042c80c7d369d3736a31fa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["netsuite", "accounting_periods"], ["netsuite", "subsidiaries"]], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounting_periods", "source.netsuite.netsuite.subsidiaries"]}, "description": "(Step 3/4) Once we have the cleaned transaction_lines_w_accounting_periods, we now need to figure out which exchange rate we should use for the currency conversion.  The balance sheet complicates  things, as conversion rates vary based on the reporting period.  Therefore, all transactions  need to be converted not only for the period in which the transaction took place in, but also  all subsequent periods. transaction_and_reporting_periods creates the necessary mapping for this.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/transaction_and_reporting_periods.sql", "deferred": false, "compiled_sql": "with accounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n),\nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_and_reporting_periods as ( \n\n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n  join accounting_periods as multiplier\n    on multiplier.starting >= base.starting\n    and multiplier.quarter = base.quarter\n    and multiplier.year_0 = base.year_0\n    and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n    and multiplier.starting <= CURRENT_TIMESTAMP()\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\nselect * from transaction_and_reporting_periods", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with accounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n),\nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_and_reporting_periods as ( \n\n  select\n    base.accounting_period_id as accounting_period_id,\n    multiplier.accounting_period_id as reporting_accounting_period_id\n  from accounting_periods as base\n  join accounting_periods as multiplier\n    on multiplier.starting >= base.starting\n    and multiplier.quarter = base.quarter\n    and multiplier.year_0 = base.year_0\n    and multiplier.fiscal_calendar_id = base.fiscal_calendar_id\n    and multiplier.starting <= CURRENT_TIMESTAMP()\n  where lower(base.quarter) = 'no'\n    and lower(base.year_0) = 'no'\n    and base.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null) -- fiscal calendar will align with parent subsidiary's default calendar\n)\nselect * from transaction_and_reporting_periods"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0776710510253906, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:54.014074Z", "completed_at": "2020-10-22T21:29:54.055839Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:54.056139Z", "completed_at": "2020-10-22T21:29:55.074162Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with transaction_lines_w_accounting_period as (\n    select * from {{ref('transaction_lines_w_accounting_period')}}\n), \naccountxperiod_exchange_rate_map as (\n    select * from {{ref('accountxperiod_exchange_rate_map')}}\n), \ntransaction_and_reporting_periods as (\n    select * from {{ref('transaction_and_reporting_periods')}}\n), \naccounts as (\n    select * from {{ source('netsuite', 'accounts') }}\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n  join transaction_and_reporting_periods on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n    and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n    and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), transactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n      end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      else null \n      end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n  join accounts on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * from transactions_with_converted_amounts", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "transactions_with_converted_amounts"], "unique_id": "model.netsuite.transactions_with_converted_amounts", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "transactions_with_converted_amounts.sql", "original_file_path": "models/transactions_with_converted_amounts.sql", "name": "transactions_with_converted_amounts", "resource_type": "model", "alias": "transactions_with_converted_amounts", "checksum": {"name": "sha256", "checksum": "5416651cb812f7138547a04ed09a0a916090f873ae9684dadc5c83f84b467563"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transaction_lines_w_accounting_period"], ["accountxperiod_exchange_rate_map"], ["transaction_and_reporting_periods"]], "sources": [["netsuite", "accounts"]], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounts", "model.netsuite.transaction_lines_w_accounting_period", "model.netsuite.accountxperiod_exchange_rate_map", "model.netsuite.transaction_and_reporting_periods"]}, "description": "(Step 4/4) Now that we have the exchange rates and the unconverted amounts, the next step is  to calculate the converted total. Additonally, we add in a couple of extra fields that will help us in our final balance sheet  and income statement queries.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/transactions_with_converted_amounts.sql", "deferred": false, "compiled_sql": "with transaction_lines_w_accounting_period as (\n    select * from `private-internal`.`dbt_kristin`.`transaction_lines_w_accounting_period`\n), \naccountxperiod_exchange_rate_map as (\n    select * from `private-internal`.`dbt_kristin`.`accountxperiod_exchange_rate_map`\n), \ntransaction_and_reporting_periods as (\n    select * from `private-internal`.`dbt_kristin`.`transaction_and_reporting_periods`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n  join transaction_and_reporting_periods on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n    and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n    and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), transactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n      end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      else null \n      end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n  join accounts on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * from transactions_with_converted_amounts", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with transaction_lines_w_accounting_period as (\n    select * from `private-internal`.`dbt_kristin`.`transaction_lines_w_accounting_period`\n), \naccountxperiod_exchange_rate_map as (\n    select * from `private-internal`.`dbt_kristin`.`accountxperiod_exchange_rate_map`\n), \ntransaction_and_reporting_periods as (\n    select * from `private-internal`.`dbt_kristin`.`transaction_and_reporting_periods`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n),\n\ntransactions_in_every_calculation_period_w_exchange_rates as (\n  select\n    transaction_lines_w_accounting_period.*,\n    reporting_accounting_period_id,\n    exchange_reporting_period.exchange_rate as exchange_rate_reporting_period,\n    exchange_transaction_period.exchange_rate as exchange_rate_transaction_period\n  from transaction_lines_w_accounting_period\n  join transaction_and_reporting_periods on transaction_and_reporting_periods.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id \n  join accountxperiod_exchange_rate_map as exchange_reporting_period\n    on exchange_reporting_period.accounting_period_id = transaction_and_reporting_periods.reporting_accounting_period_id\n    and exchange_reporting_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_reporting_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n  join accountxperiod_exchange_rate_map as exchange_transaction_period\n    on exchange_transaction_period.accounting_period_id = transaction_and_reporting_periods.accounting_period_id\n    and exchange_transaction_period.account_id = transaction_lines_w_accounting_period.account_id\n    and exchange_transaction_period.from_subsidiary_id = transaction_lines_w_accounting_period.subsidiary_id\n), transactions_with_converted_amounts as (\n  select\n    transactions_in_every_calculation_period_w_exchange_rates.*,\n    unconverted_amount * exchange_rate_transaction_period as converted_amount_using_transaction_accounting_period,\n    unconverted_amount * exchange_rate_reporting_period as converted_amount_using_reporting_month,\n    case\n      when lower(accounts.type_name) in ('income','other income','expense','other expense','other income','cost of goods sold') then true\n      else false \n      end as is_income_statement,\n    case\n      when lower(accounts.type_name) in ('accounts receivable', 'bank', 'deferred expense', 'fixed asset', 'other asset', 'other current asset', 'unbilled receivable') then 'Asset'\n      when lower(accounts.type_name) in ('cost of goods sold', 'expense', 'other expense') then 'Expense'\n      when lower(accounts.type_name) in ('income', 'other income') then 'Income'\n      when lower(accounts.type_name) in ('accounts payable', 'credit card', 'deferred revenue', 'long term liability', 'other current liability') then 'Liability'\n      when lower(accounts.type_name) in ('equity', 'retained earnings', 'net income') then 'Equity'\n      else null \n      end as account_category\n  from transactions_in_every_calculation_period_w_exchange_rates\n  join accounts on accounts.account_id = transactions_in_every_calculation_period_w_exchange_rates.account_id \n)\n\nselect * from transactions_with_converted_amounts"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2357969284057617, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:55.078451Z", "completed_at": "2020-10-22T21:29:55.091674Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:55.091953Z", "completed_at": "2020-10-22T21:29:56.313417Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with transactions_with_converted_amounts as (\n    select * from {{ref('transactions_with_converted_amounts')}}\n),\naccounts as (\n    select * from {{ source('netsuite', 'accounts') }}\n),\naccounting_periods as (\n    select * from {{ source('netsuite', 'accounting_periods') }}\n),\nsubsidiaries as (\n    select * from {{ source('netsuite', 'subsidiaries') }}\n),\ntransaction_lines as (\n    select * from {{ source('netsuite', 'transaction_lines') }}\n),\ntransactions as (\n    select * from {{ source('netsuite', 'transactions') }}\n),\nincome_accounts as (\n    select * from {{ source('netsuite', 'income_accounts') }}\n),\nexpense_accounts as (\n    select * from {{ source('netsuite', 'expense_accounts') }}\n),\ncustomers as (\n    select * from {{ source('netsuite', 'customers') }}\n),\nitems as (\n    select * from {{ source('netsuite', 'items') }}\n),\nlocations as (\n    select * from {{ source('netsuite', 'locations') }}\n),\nvendors as (\n    select * from {{ source('netsuite', 'vendors') }}\n),\nvendor_types as (\n    select * from {{ source('netsuite', 'vendor_types') }}\n),\ndepartments as (\n    select * from {{ source('netsuite', 'departments') }}\n),\ncurrencies as (\n    select * from {{ source('netsuite', 'currencies') }}\n)\n\nselect\n  transaction_lines.transaction_line_id,\n  transaction_lines.memo as transaction_memo,\n  lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n  transactions.transaction_id,\n  transactions.status as transaction_status,\n  transactions.trandate as transaction_date,\n  transactions.due_date as transaction_due_date,\n  transactions.transaction_type as transaction_type,\n  (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany,\n  accounting_periods.ending as accounting_period_ending,\n  accounting_periods.full_name as accounting_period_full_name,\n  accounting_periods.name as accounting_period_name,\n  lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  lower(accounts.is_leftside) = 't' as is_account_leftside,\n  lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n  lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n  lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n  coalesce(parent_account.name, accounts.name) as parent_account_name,\n  income_accounts.income_account_id is not null as is_income_account,\n  expense_accounts.expense_account_id is not null as is_expense_account,\n  customers.companyname as customer_company_name,\n  customers.city as customer_city,\n  customers.state as customer_state,\n  customers.zipcode as customer_zipcode,\n  customers.country as customer_country,\n  customers.date_first_order as customer_date_first_order,\n  items.name as item_name,\n  items.type_name as item_type_name,\n  items.salesdescription as item_sales_description,\n  locations.name as location_name,\n  locations.city as location_city,\n  locations.country as location_country,\n  vendor_types.name as vendor_type_name,\n  vendors.companyname as vendor_name,\n  vendors.create_date as vendor_create_date,\n  currencies.name as currency_name,\n  currencies.symbol as currency_symbol,\n  departments.name as department_name,\n  subsidiaries.name as subsidiary_name,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n    else converted_amount_using_transaction_accounting_period\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n    else transaction_lines.amount\n    end as transaction_amount\nfrom transaction_lines\njoin transactions on transactions.transaction_id = transaction_lines.transaction_id\n  and not transactions._fivetran_deleted\nleft join transactions_with_converted_amounts as transactions_with_converted_amounts\n  on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n  and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nleft join accounts on accounts.account_id = transaction_lines.account_id\nleft join accounts as parent_account on parent_account.account_id = accounts.parent_id\nleft join accounting_periods on accounting_periods.accounting_period_id = transactions.accounting_period_id\nleft join income_accounts on income_accounts.income_account_id = accounts.account_id\nleft join expense_accounts on expense_accounts.expense_account_id = accounts.account_id\nleft join customers on customers.customer_id = transaction_lines.company_id\n  and not customers._fivetran_deleted\nleft join items on items.item_id = transaction_lines.item_id\n  and not items._fivetran_deleted\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join vendors on vendors.vendor_id = transaction_lines.company_id\n  and not vendors._fivetran_deleted\nleft join vendor_types on vendor_types.vendor_type_id = vendors.vendor_type_id\n  and not vendor_types._fivetran_deleted\nleft join currencies on currencies.currency_id = transactions.currency_id\n  and not currencies._fivetran_deleted\nleft join departments on departments.department_id = transaction_lines.department_id\njoin subsidiaries on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\nwhere (accounting_periods.fiscal_calendar_id is null\n  or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "transaction_details"], "unique_id": "model.netsuite.transaction_details", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "transaction_details.sql", "original_file_path": "models/transaction_details.sql", "name": "transaction_details", "resource_type": "model", "alias": "transaction_details", "checksum": {"name": "sha256", "checksum": "8351ef6297ca523a365f7bdc04121ab3c4289fab32cb01ca76c8cdcea63bad83"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transactions_with_converted_amounts"]], "sources": [["netsuite", "accounts"], ["netsuite", "accounting_periods"], ["netsuite", "subsidiaries"], ["netsuite", "transaction_lines"], ["netsuite", "transactions"], ["netsuite", "income_accounts"], ["netsuite", "expense_accounts"], ["netsuite", "customers"], ["netsuite", "items"], ["netsuite", "locations"], ["netsuite", "vendors"], ["netsuite", "vendor_types"], ["netsuite", "departments"], ["netsuite", "currencies"]], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounts", "source.netsuite.netsuite.accounting_periods", "source.netsuite.netsuite.subsidiaries", "source.netsuite.netsuite.transaction_lines", "source.netsuite.netsuite.transactions", "source.netsuite.netsuite.income_accounts", "source.netsuite.netsuite.expense_accounts", "source.netsuite.netsuite.customers", "source.netsuite.netsuite.items", "source.netsuite.netsuite.locations", "source.netsuite.netsuite.vendors", "source.netsuite.netsuite.vendor_types", "source.netsuite.netsuite.departments", "source.netsuite.netsuite.currencies", "model.netsuite.transactions_with_converted_amounts"]}, "description": "This table uses Netsuite's core table, transaction_lines, and joins a handful of  other tables to add more detail to those line items.  For all transactions, you are  able to see the associated accounting period, account and subsidiary.  Where applicable,  you can also see information about the customer, location, item, vendor, and department.\n", "columns": {"transaction_line_id": {"name": "transaction_line_id", "description": "Netsuite internal transaction line ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_transaction_non_posting": {"name": "is_transaction_non_posting", "description": "Yes/No field, indicating whether or not the transaction line is non-posting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Netsuite internal transaction ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_transaction_intercompany": {"name": "is_transaction_intercompany", "description": "Yes/No field, indicating whether or not the transaction is an intercompany transaction or an advanced intercompany transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_ending": {"name": "accounting_period_ending", "description": "End date of the accounting period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_adjustment": {"name": "is_accounting_period_adjustment", "description": "Yes/No field, indicating whether or not the selecting accounting period is an adjustment period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_closed": {"name": "is_accounting_period_closed", "description": "Yes/No field, indicating whether or not the selecting accounting period is closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_account_leftside": {"name": "is_account_leftside", "description": "Yes/No field indicating whether or not the account is leftside", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounts_payable": {"name": "is_accounts_payable", "description": "Yes/No field indicating whether or not the account type name includes 'accounts payable'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounts_receivable": {"name": "is_accounts_receivable", "description": "Yes/No field indicating whether or not the account type name includes 'accounts receivable'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_account_intercompany": {"name": "is_account_intercompany", "description": "Yes/No field indicating whether or not the account type name includes 'intercompany'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_name": {"name": "parent_account_name", "description": "Name of the parent account, if parent account relationship exists.  Otherwise, the name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_income_account": {"name": "is_income_account", "description": "Yes/No field indicating whether or not the account is an income account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_expense_account": {"name": "is_expense_account", "description": "Yes/No field indicating whether or not the account is an expense account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_date_first_order": {"name": "customer_date_first_order", "description": "Date customer placed first order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_create_date": {"name": "vendor_create_date", "description": "Date vendor was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "converted_amount": {"name": "converted_amount", "description": "Transaction amount, converted into the primary subsidiary's default currency", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_amount": {"name": "transaction_amount", "description": "Total amount of the transaction line", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/transaction_details.sql", "deferred": false, "compiled_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n),\naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n),\naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n),\nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\ntransactions as (\n    select * from `private-internal`.`netsuite`.`transactions`\n),\nincome_accounts as (\n    select * from `private-internal`.`netsuite`.`income_accounts`\n),\nexpense_accounts as (\n    select * from `private-internal`.`netsuite`.`expense_accounts`\n),\ncustomers as (\n    select * from `private-internal`.`netsuite`.`customers`\n),\nitems as (\n    select * from `private-internal`.`netsuite`.`items`\n),\nlocations as (\n    select * from `private-internal`.`netsuite`.`locations`\n),\nvendors as (\n    select * from `private-internal`.`netsuite`.`vendors`\n),\nvendor_types as (\n    select * from `private-internal`.`netsuite`.`vendor_types`\n),\ndepartments as (\n    select * from `private-internal`.`netsuite`.`departments`\n),\ncurrencies as (\n    select * from `private-internal`.`netsuite`.`currencies`\n)\n\nselect\n  transaction_lines.transaction_line_id,\n  transaction_lines.memo as transaction_memo,\n  lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n  transactions.transaction_id,\n  transactions.status as transaction_status,\n  transactions.trandate as transaction_date,\n  transactions.due_date as transaction_due_date,\n  transactions.transaction_type as transaction_type,\n  (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany,\n  accounting_periods.ending as accounting_period_ending,\n  accounting_periods.full_name as accounting_period_full_name,\n  accounting_periods.name as accounting_period_name,\n  lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  lower(accounts.is_leftside) = 't' as is_account_leftside,\n  lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n  lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n  lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n  coalesce(parent_account.name, accounts.name) as parent_account_name,\n  income_accounts.income_account_id is not null as is_income_account,\n  expense_accounts.expense_account_id is not null as is_expense_account,\n  customers.companyname as customer_company_name,\n  customers.city as customer_city,\n  customers.state as customer_state,\n  customers.zipcode as customer_zipcode,\n  customers.country as customer_country,\n  customers.date_first_order as customer_date_first_order,\n  items.name as item_name,\n  items.type_name as item_type_name,\n  items.salesdescription as item_sales_description,\n  locations.name as location_name,\n  locations.city as location_city,\n  locations.country as location_country,\n  vendor_types.name as vendor_type_name,\n  vendors.companyname as vendor_name,\n  vendors.create_date as vendor_create_date,\n  currencies.name as currency_name,\n  currencies.symbol as currency_symbol,\n  departments.name as department_name,\n  subsidiaries.name as subsidiary_name,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n    else converted_amount_using_transaction_accounting_period\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n    else transaction_lines.amount\n    end as transaction_amount\nfrom transaction_lines\njoin transactions on transactions.transaction_id = transaction_lines.transaction_id\n  and not transactions._fivetran_deleted\nleft join transactions_with_converted_amounts as transactions_with_converted_amounts\n  on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n  and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nleft join accounts on accounts.account_id = transaction_lines.account_id\nleft join accounts as parent_account on parent_account.account_id = accounts.parent_id\nleft join accounting_periods on accounting_periods.accounting_period_id = transactions.accounting_period_id\nleft join income_accounts on income_accounts.income_account_id = accounts.account_id\nleft join expense_accounts on expense_accounts.expense_account_id = accounts.account_id\nleft join customers on customers.customer_id = transaction_lines.company_id\n  and not customers._fivetran_deleted\nleft join items on items.item_id = transaction_lines.item_id\n  and not items._fivetran_deleted\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join vendors on vendors.vendor_id = transaction_lines.company_id\n  and not vendors._fivetran_deleted\nleft join vendor_types on vendor_types.vendor_type_id = vendors.vendor_type_id\n  and not vendor_types._fivetran_deleted\nleft join currencies on currencies.currency_id = transactions.currency_id\n  and not currencies._fivetran_deleted\nleft join departments on departments.department_id = transaction_lines.department_id\njoin subsidiaries on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\nwhere (accounting_periods.fiscal_calendar_id is null\n  or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n),\naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n),\naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n),\nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\ntransactions as (\n    select * from `private-internal`.`netsuite`.`transactions`\n),\nincome_accounts as (\n    select * from `private-internal`.`netsuite`.`income_accounts`\n),\nexpense_accounts as (\n    select * from `private-internal`.`netsuite`.`expense_accounts`\n),\ncustomers as (\n    select * from `private-internal`.`netsuite`.`customers`\n),\nitems as (\n    select * from `private-internal`.`netsuite`.`items`\n),\nlocations as (\n    select * from `private-internal`.`netsuite`.`locations`\n),\nvendors as (\n    select * from `private-internal`.`netsuite`.`vendors`\n),\nvendor_types as (\n    select * from `private-internal`.`netsuite`.`vendor_types`\n),\ndepartments as (\n    select * from `private-internal`.`netsuite`.`departments`\n),\ncurrencies as (\n    select * from `private-internal`.`netsuite`.`currencies`\n)\n\nselect\n  transaction_lines.transaction_line_id,\n  transaction_lines.memo as transaction_memo,\n  lower(transaction_lines.non_posting_line) = 'yes' as is_transaction_non_posting,\n  transactions.transaction_id,\n  transactions.status as transaction_status,\n  transactions.trandate as transaction_date,\n  transactions.due_date as transaction_due_date,\n  transactions.transaction_type as transaction_type,\n  (lower(transactions.is_advanced_intercompany) = 'yes' or lower(transactions.is_intercompany) = 'yes') as is_transaction_intercompany,\n  accounting_periods.ending as accounting_period_ending,\n  accounting_periods.full_name as accounting_period_full_name,\n  accounting_periods.name as accounting_period_name,\n  lower(accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  lower(accounts.is_leftside) = 't' as is_account_leftside,\n  lower(accounts.type_name) like 'accounts payable%' as is_accounts_payable,\n  lower(accounts.type_name) like 'accounts receivable%' as is_accounts_receivable,\n  lower(accounts.name) like '%intercompany%' as is_account_intercompany,\n  coalesce(parent_account.name, accounts.name) as parent_account_name,\n  income_accounts.income_account_id is not null as is_income_account,\n  expense_accounts.expense_account_id is not null as is_expense_account,\n  customers.companyname as customer_company_name,\n  customers.city as customer_city,\n  customers.state as customer_state,\n  customers.zipcode as customer_zipcode,\n  customers.country as customer_country,\n  customers.date_first_order as customer_date_first_order,\n  items.name as item_name,\n  items.type_name as item_type_name,\n  items.salesdescription as item_sales_description,\n  locations.name as location_name,\n  locations.city as location_city,\n  locations.country as location_country,\n  vendor_types.name as vendor_type_name,\n  vendors.companyname as vendor_name,\n  vendors.create_date as vendor_create_date,\n  currencies.name as currency_name,\n  currencies.symbol as currency_symbol,\n  departments.name as department_name,\n  subsidiaries.name as subsidiary_name,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -converted_amount_using_transaction_accounting_period\n    else converted_amount_using_transaction_accounting_period\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'income' or lower(accounts.type_name) = 'other income' then -transaction_lines.amount\n    else transaction_lines.amount\n    end as transaction_amount\nfrom transaction_lines\njoin transactions on transactions.transaction_id = transaction_lines.transaction_id\n  and not transactions._fivetran_deleted\nleft join transactions_with_converted_amounts as transactions_with_converted_amounts\n  on transactions_with_converted_amounts.transaction_line_id = transaction_lines.transaction_line_id\n  and transactions_with_converted_amounts.transaction_id = transaction_lines.transaction_id\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nleft join accounts on accounts.account_id = transaction_lines.account_id\nleft join accounts as parent_account on parent_account.account_id = accounts.parent_id\nleft join accounting_periods on accounting_periods.accounting_period_id = transactions.accounting_period_id\nleft join income_accounts on income_accounts.income_account_id = accounts.account_id\nleft join expense_accounts on expense_accounts.expense_account_id = accounts.account_id\nleft join customers on customers.customer_id = transaction_lines.company_id\n  and not customers._fivetran_deleted\nleft join items on items.item_id = transaction_lines.item_id\n  and not items._fivetran_deleted\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join vendors on vendors.vendor_id = transaction_lines.company_id\n  and not vendors._fivetran_deleted\nleft join vendor_types on vendor_types.vendor_type_id = vendors.vendor_type_id\n  and not vendor_types._fivetran_deleted\nleft join currencies on currencies.currency_id = transactions.currency_id\n  and not currencies._fivetran_deleted\nleft join departments on departments.department_id = transaction_lines.department_id\njoin subsidiaries on subsidiaries.subsidiary_id = transaction_lines.subsidiary_id\nwhere (accounting_periods.fiscal_calendar_id is null\n  or accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null))"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.5167241096496582, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:56.337147Z", "completed_at": "2020-10-22T21:29:56.407449Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:56.407648Z", "completed_at": "2020-10-22T21:29:57.841336Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with transactions_with_converted_amounts as (\n    select * from {{ref('transactions_with_converted_amounts')}}\n), \naccounts as (\n    select * from {{ source('netsuite', 'accounts') }}\n), \naccounting_periods as (\n    select * from {{ source('netsuite', 'accounting_periods') }}\n), \nsubsidiaries as (\n    select * from {{ source('netsuite', 'subsidiaries') }}\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  transactions_with_converted_amounts.account_category as account_category,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.name\n    end as account_name,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.type_name\n    end as account_type_name,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.account_id\n    end as account_id,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.accountnumber\n    end as account_number,\n  case\n    when lower(accounts.is_balancesheet) = 'f' or lower(transactions_with_converted_amounts.account_category) = 'equity' then -converted_amount_using_transaction_accounting_period\n    when lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n    when lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n    else 0\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'bank' then 1\n    when lower(accounts.type_name) = 'accounts receivable' then 2\n    when lower(accounts.type_name) = 'unbilled receivable' then 3\n    when lower(accounts.type_name) = 'other current asset' then 4\n    when lower(accounts.type_name) = 'fixed asset' then 5\n    when lower(accounts.type_name) = 'other asset' then 6\n    when lower(accounts.type_name) = 'deferred expense' then 7\n    when lower(accounts.type_name) = 'accounts payable' then 8\n    when lower(accounts.type_name) = 'credit card' then 9\n    when lower(accounts.type_name) = 'other current liability' then 10\n    when lower(accounts.type_name) = 'long term liability' then 11\n    when lower(accounts.type_name) = 'deferred revenue' then 12\n    when lower(accounts.type_name) = 'equity' then 13\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n    when lower(accounts.is_balancesheet) = 'f' then 14\n    else null\n    end as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\njoin accounting_periods as transaction_accounting_periods on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)\n\nunion all\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  'Equity' as account_category,\n  'Cumulative Translation Adjustment' as account_name,\n  'Cumulative Translation Adjustment' as account_type_name,\n  null as account_id,\n  null as account_number,\n  case\n    when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n    else converted_amount_using_reporting_month\n    end as converted_amount,\n  16 as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "balance_sheet"], "unique_id": "model.netsuite.balance_sheet", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "balance_sheet.sql", "original_file_path": "models/balance_sheet.sql", "name": "balance_sheet", "resource_type": "model", "alias": "balance_sheet", "checksum": {"name": "sha256", "checksum": "cf5fc85fe755725c71f59d405d5094d435a377271147b622c5e3b654a032189a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transactions_with_converted_amounts"]], "sources": [["netsuite", "accounts"], ["netsuite", "accounting_periods"], ["netsuite", "subsidiaries"]], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounts", "source.netsuite.netsuite.accounting_periods", "source.netsuite.netsuite.subsidiaries", "model.netsuite.transactions_with_converted_amounts"]}, "description": "The balance sheet query uses the transactions_with_converted_amount transformation to recreate all lines necessary for the balance sheet. Transactions that are not balance sheet transactions are categorized as either Retained Earnings or Net Income.  The Cumulative Translation Adjustment total, which in most cases does not have transactions associated with it, is calculated manually in the second part of the query.\n", "columns": {"accounting_period_ending": {"name": "accounting_period_ending", "description": "End date of the accounting period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_adjustment": {"name": "is_accounting_period_adjustment", "description": "Yes/No field, indicating whether or not the selecting accounting period is an adjustment period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_closed": {"name": "is_accounting_period_closed", "description": "Yes/No field, indicating whether or not the selecting accounting period is closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_category": {"name": "account_category", "description": "Category of the account.  Options include Asset, Liability, Equity, Expense or Income.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "converted_amount": {"name": "converted_amount", "description": "Transaction amount, converted into the primary subsidiary's default currency", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/balance_sheet.sql", "deferred": false, "compiled_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  transactions_with_converted_amounts.account_category as account_category,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.name\n    end as account_name,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.type_name\n    end as account_type_name,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.account_id\n    end as account_id,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.accountnumber\n    end as account_number,\n  case\n    when lower(accounts.is_balancesheet) = 'f' or lower(transactions_with_converted_amounts.account_category) = 'equity' then -converted_amount_using_transaction_accounting_period\n    when lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n    when lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n    else 0\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'bank' then 1\n    when lower(accounts.type_name) = 'accounts receivable' then 2\n    when lower(accounts.type_name) = 'unbilled receivable' then 3\n    when lower(accounts.type_name) = 'other current asset' then 4\n    when lower(accounts.type_name) = 'fixed asset' then 5\n    when lower(accounts.type_name) = 'other asset' then 6\n    when lower(accounts.type_name) = 'deferred expense' then 7\n    when lower(accounts.type_name) = 'accounts payable' then 8\n    when lower(accounts.type_name) = 'credit card' then 9\n    when lower(accounts.type_name) = 'other current liability' then 10\n    when lower(accounts.type_name) = 'long term liability' then 11\n    when lower(accounts.type_name) = 'deferred revenue' then 12\n    when lower(accounts.type_name) = 'equity' then 13\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n    when lower(accounts.is_balancesheet) = 'f' then 14\n    else null\n    end as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\njoin accounting_periods as transaction_accounting_periods on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)\n\nunion all\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  'Equity' as account_category,\n  'Cumulative Translation Adjustment' as account_name,\n  'Cumulative Translation Adjustment' as account_type_name,\n  null as account_id,\n  null as account_number,\n  case\n    when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n    else converted_amount_using_reporting_month\n    end as converted_amount,\n  16 as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  transactions_with_converted_amounts.account_category as account_category,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.name\n    end as account_name,\n  case\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 'Net Income'\n    when lower(accounts.is_balancesheet) = 'f' then 'Retained Earnings'\n    else accounts.type_name\n    end as account_type_name,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.account_id\n    end as account_id,\n  case\n    when lower(accounts.is_balancesheet) = 'f' then null\n    else accounts.accountnumber\n    end as account_number,\n  case\n    when lower(accounts.is_balancesheet) = 'f' or lower(transactions_with_converted_amounts.account_category) = 'equity' then -converted_amount_using_transaction_accounting_period\n    when lower(accounts.is_leftside) = 'f' then -converted_amount_using_reporting_month\n    when lower(accounts.is_leftside) = 't' then converted_amount_using_reporting_month\n    else 0\n    end as converted_amount,\n  case\n    when lower(accounts.type_name) = 'bank' then 1\n    when lower(accounts.type_name) = 'accounts receivable' then 2\n    when lower(accounts.type_name) = 'unbilled receivable' then 3\n    when lower(accounts.type_name) = 'other current asset' then 4\n    when lower(accounts.type_name) = 'fixed asset' then 5\n    when lower(accounts.type_name) = 'other asset' then 6\n    when lower(accounts.type_name) = 'deferred expense' then 7\n    when lower(accounts.type_name) = 'accounts payable' then 8\n    when lower(accounts.type_name) = 'credit card' then 9\n    when lower(accounts.type_name) = 'other current liability' then 10\n    when lower(accounts.type_name) = 'long term liability' then 11\n    when lower(accounts.type_name) = 'deferred revenue' then 12\n    when lower(accounts.type_name) = 'equity' then 13\n    when (lower(accounts.is_balancesheet) = 'f' and reporting_accounting_periods.year_id = transaction_accounting_periods.year_id) then 15\n    when lower(accounts.is_balancesheet) = 'f' then 14\n    else null\n    end as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\njoin accounting_periods as transaction_accounting_periods on transaction_accounting_periods.accounting_period_id = transactions_with_converted_amounts.transaction_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transaction_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)\n\nunion all\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  'Equity' as account_category,\n  'Cumulative Translation Adjustment' as account_name,\n  'Cumulative Translation Adjustment' as account_type_name,\n  null as account_id,\n  null as account_number,\n  case\n    when lower(account_category) = 'equity' or is_income_statement then converted_amount_using_transaction_accounting_period\n    else converted_amount_using_reporting_month\n    end as converted_amount,\n  16 as balance_sheet_sort_helper\nfrom transactions_with_converted_amounts\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and (lower(accounts.is_balancesheet) = 't'\n    or transactions_with_converted_amounts.is_income_statement)"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.6981379985809326, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:56.324853Z", "completed_at": "2020-10-22T21:29:56.399848Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:56.400080Z", "completed_at": "2020-10-22T21:29:58.019488Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with transactions_with_converted_amounts as (\n    select * from {{ref('transactions_with_converted_amounts')}}\n), \naccounts as (\n    select * from {{ source('netsuite', 'accounts') }}\n), \naccounting_periods as (\n    select * from {{ source('netsuite', 'accounting_periods') }}\n), \nsubsidiaries as (\n    select * from {{ source('netsuite', 'subsidiaries') }}\n),\ntransaction_lines as (\n    select * from {{ source('netsuite', 'transaction_lines') }}\n),\nclasses as (\n    select * from {{ source('netsuite', 'classes') }}\n),\nlocations as (\n    select * from {{ source('netsuite', 'locations') }}\n),\ndepartments as (\n    select * from {{ source('netsuite', 'departments') }}\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  {{ dbt_utils.concat(['accounts.accountnumber',\"'-'\", 'accounts.name']) }} as account_number_and_name,\n  classes.full_name as class_full_name,\n  locations.full_name as location_full_name,\n  departments.full_name as department_full_name,\n  -converted_amount_using_transaction_accounting_period as converted_amount,\n  transactions_with_converted_amounts.account_category as account_category,\n  case when lower(accounts.type_name) = 'income' then 1\n    when lower(accounts.type_name) = 'cost of goods sold' then 2\n    when lower(accounts.type_name) = 'expense' then 3\n    when lower(accounts.type_name) = 'other income' then 4\n    when lower(accounts.type_name) = 'other expense' then 5\n    else null\n    end as income_statement_sort_helper\nfrom transactions_with_converted_amounts\njoin transaction_lines as transaction_lines\n  on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n  and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\nleft join classes on classes.class_id = transaction_lines.class_id\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join departments on departments.department_id = transaction_lines.department_id\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n  and transactions_with_converted_amounts.is_income_statement", "compiled": true, "database": "private-internal", "schema": "dbt_kristin", "fqn": ["netsuite", "income_statement"], "unique_id": "model.netsuite.income_statement", "package_name": "netsuite", "root_path": "/Users/kristin/Documents/Github/dbt_netsuite", "path": "income_statement.sql", "original_file_path": "models/income_statement.sql", "name": "income_statement", "resource_type": "model", "alias": "income_statement", "checksum": {"name": "sha256", "checksum": "9279cebfb8095b100f5c8d0889d60ffab6756e279c22c31f3bd1dbaa4adc7568"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transactions_with_converted_amounts"]], "sources": [["netsuite", "accounts"], ["netsuite", "accounting_periods"], ["netsuite", "subsidiaries"], ["netsuite", "transaction_lines"], ["netsuite", "classes"], ["netsuite", "locations"], ["netsuite", "departments"]], "depends_on": {"macros": ["macro.dbt_utils.concat", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.netsuite.netsuite.accounts", "source.netsuite.netsuite.accounting_periods", "source.netsuite.netsuite.subsidiaries", "source.netsuite.netsuite.transaction_lines", "source.netsuite.netsuite.classes", "source.netsuite.netsuite.locations", "source.netsuite.netsuite.departments", "model.netsuite.transactions_with_converted_amounts"]}, "description": "The income statment query uses the transactions_with_converted_amount transformation  to recreate all lines necessary for the income statment.  It also joins in class,  department and location information for enhanced reporting. \n", "columns": {"accounting_period_ending": {"name": "accounting_period_ending", "description": "End date of the accounting period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_adjustment": {"name": "is_accounting_period_adjustment", "description": "Yes/No field, indicating whether or not the selecting accounting period is an adjustment period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accounting_period_closed": {"name": "is_accounting_period_closed", "description": "Yes/No field, indicating whether or not the selecting accounting period is closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number_and_name": {"name": "account_number_and_name", "description": "Concatenation of account number and account name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "converted_amount": {"name": "converted_amount", "description": "Transaction amount, converted into the primary subsidiary's default currency", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_category": {"name": "account_category", "description": "Category of the account. Options include Asset, Liability, Equity, Expense or Income.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/netsuite.yml", "build_path": "target/run/netsuite/models/income_statement.sql", "deferred": false, "compiled_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\nclasses as (\n    select * from `private-internal`.`netsuite`.`classes`\n),\nlocations as (\n    select * from `private-internal`.`netsuite`.`locations`\n),\ndepartments as (\n    select * from `private-internal`.`netsuite`.`departments`\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  concat(accounts.accountnumber, '-', accounts.name) as account_number_and_name,\n  classes.full_name as class_full_name,\n  locations.full_name as location_full_name,\n  departments.full_name as department_full_name,\n  -converted_amount_using_transaction_accounting_period as converted_amount,\n  transactions_with_converted_amounts.account_category as account_category,\n  case when lower(accounts.type_name) = 'income' then 1\n    when lower(accounts.type_name) = 'cost of goods sold' then 2\n    when lower(accounts.type_name) = 'expense' then 3\n    when lower(accounts.type_name) = 'other income' then 4\n    when lower(accounts.type_name) = 'other expense' then 5\n    else null\n    end as income_statement_sort_helper\nfrom transactions_with_converted_amounts\njoin transaction_lines as transaction_lines\n  on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n  and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\nleft join classes on classes.class_id = transaction_lines.class_id\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join departments on departments.department_id = transaction_lines.department_id\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n  and transactions_with_converted_amounts.is_income_statement", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with transactions_with_converted_amounts as (\n    select * from `private-internal`.`dbt_kristin`.`transactions_with_converted_amounts`\n), \naccounts as (\n    select * from `private-internal`.`netsuite`.`accounts`\n), \naccounting_periods as (\n    select * from `private-internal`.`netsuite`.`accounting_periods`\n), \nsubsidiaries as (\n    select * from `private-internal`.`netsuite`.`subsidiaries`\n),\ntransaction_lines as (\n    select * from `private-internal`.`netsuite`.`transaction_lines`\n),\nclasses as (\n    select * from `private-internal`.`netsuite`.`classes`\n),\nlocations as (\n    select * from `private-internal`.`netsuite`.`locations`\n),\ndepartments as (\n    select * from `private-internal`.`netsuite`.`departments`\n)\n\nselect\n  reporting_accounting_periods.accounting_period_id as accounting_period_id,\n  reporting_accounting_periods.ending as accounting_period_ending,\n  reporting_accounting_periods.full_name as accounting_period_full_name,\n  reporting_accounting_periods.name as accounting_period_name,\n  lower(reporting_accounting_periods.is_adjustment) = 'yes' as is_accounting_period_adjustment,\n  lower(reporting_accounting_periods.closed) = 'yes' as is_accounting_period_closed,\n  accounts.name as account_name,\n  accounts.type_name as account_type_name,\n  accounts.account_id as account_id,\n  accounts.accountnumber as account_number,\n  concat(accounts.accountnumber, '-', accounts.name) as account_number_and_name,\n  classes.full_name as class_full_name,\n  locations.full_name as location_full_name,\n  departments.full_name as department_full_name,\n  -converted_amount_using_transaction_accounting_period as converted_amount,\n  transactions_with_converted_amounts.account_category as account_category,\n  case when lower(accounts.type_name) = 'income' then 1\n    when lower(accounts.type_name) = 'cost of goods sold' then 2\n    when lower(accounts.type_name) = 'expense' then 3\n    when lower(accounts.type_name) = 'other income' then 4\n    when lower(accounts.type_name) = 'other expense' then 5\n    else null\n    end as income_statement_sort_helper\nfrom transactions_with_converted_amounts\njoin transaction_lines as transaction_lines\n  on transaction_lines.transaction_line_id = transactions_with_converted_amounts.transaction_line_id\n  and transaction_lines.transaction_id = transactions_with_converted_amounts.transaction_id\nleft join classes on classes.class_id = transaction_lines.class_id\nleft join locations on locations.location_id = transaction_lines.location_id\nleft join departments on departments.department_id = transaction_lines.department_id\njoin accounts on accounts.account_id = transactions_with_converted_amounts.account_id\njoin accounting_periods as reporting_accounting_periods on reporting_accounting_periods.accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\nwhere reporting_accounting_periods.fiscal_calendar_id  = (select fiscal_calendar_id from subsidiaries where parent_id is null)\n  and transactions_with_converted_amounts.transaction_accounting_period_id = transactions_with_converted_amounts.reporting_accounting_period_id\n  and transactions_with_converted_amounts.is_income_statement"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.9704749584197998, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-10-22T21:29:56.325536Z", "completed_at": "2020-10-22T21:29:56.403745Z"}, {"name": "execute", "started_at": "2020-10-22T21:29:56.403978Z", "completed_at": "2020-10-22T21:29:58.294298Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-10-22T21:29:58.298405Z", "elapsed_time": 5.1346399784088135}